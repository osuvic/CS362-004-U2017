        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
function assertFunc called 2 returned 100% blocks executed 60%
        2:    8:int assertFunc(int actual, int expected)
        -:    9:{
        2:   10:  if (actual == expected){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   11:    //printf("Assert confirmed.\n");
        2:   12:    return 0;
        -:   13:  }
        -:   14:  else {
    #####:   15:    printf("Error! Assert failed!\n");
call    0 never executed
    #####:   16:    return -1;
        -:   17:  }
        -:   18:
        -:   19:}
        -:   20:
function main called 2 returned 100% blocks executed 100%
        2:   21:int main(){
        -:   22:
        -:   23:  int i;
        -:   24:
        2:   25:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   26:	       remodel, smithy, village, baron, great_hall};
        -:   27:
        -:   28:  int currentPlayer;
        -:   29:  int expHandCount;
        -:   30:
        -:   31:  int temphand[MAX_HAND];
        2:   32:  int drawntreasure = 0;
        2:   33:  int cardDrawn = 0;
        -:   34:
        -:   35:  struct gameState G;
        -:   36:
        2:   37:  initializeGame(2, k, 1, &G);//Initialize game with 2 players
call    0 returned 100%
        -:   38:
        2:   39:  printf("TESTING Card Adventurer:\n");
call    0 returned 100%
        -:   40:
        2:   41:  currentPlayer = whoseTurn(&G);
call    0 returned 100%
        2:   42:  expHandCount = 5;
        -:   43:
        2:   44:  printf("Actual handcount = %d, expected = %d\n", G.handCount[currentPlayer], expHandCount);
call    0 returned 100%
        -:   45:
        -:   46:
        2:   47:  cardEffectAdventurer(currentPlayer, &G, drawntreasure, cardDrawn, temphand, MAX_HAND);
call    0 returned 100%
        2:   48:  printf("Playing Adventurer...\n");
call    0 returned 100%
        -:   49:
        2:   50:  expHandCount = 7;
        2:   51:  printf("Actual handcount = %d, expected = %d\n", G.handCount[currentPlayer], expHandCount);
call    0 returned 100%
        -:   52:
        2:   53:  if (assertFunc(G.handCount[currentPlayer], expHandCount) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:   54:    printf("All tests passed!\n");
call    0 returned 100%
        -:   55:  }
        -:   56:
        2:   57:  return 0;
        -:   58:}
