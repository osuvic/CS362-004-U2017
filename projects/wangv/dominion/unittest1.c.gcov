        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        1:    8:int main(){
        -:    9:
        -:   10:  int i;
        -:   11:
        1:   12:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   13:	       remodel, smithy, village, baron, great_hall};
        -:   14:
        -:   15:  int currentPlayer;
        -:   16:
        1:   17:  int oldHandCount = 0;//expected handcount for player ending turn
        1:   18:  int numActions = 1;//expected number of actions for player starting new turn
        1:   19:  int numBuys = 1;
        1:   20:  int newHandCount = 5;
        -:   21:
        -:   22:  struct gameState G;
        -:   23:
        1:   24:  initializeGame(2, k, 1, &G);//Initialize game with 2 players
        -:   25:
        1:   26:  printf("TESTING endTurn(): \n");
        -:   27:
        1:   28:  currentPlayer = whoseTurn(&G);
        -:   29:
        6:   30:  for(i = 0; i < 5; i++){
        5:   31:    endTurn(&G);
        5:   32:    printf("\nEnding turn...\n");
        -:   33:
        5:   34:    assert(G.handCount[currentPlayer] == oldHandCount);
        5:   35:    printf("Player %d actual handCount = %d, expected = %d\n", currentPlayer, G.handCount[currentPlayer], oldHandCount);
        -:   36:
        5:   37:    if (currentPlayer < (G.numPlayers - 1)){
        3:   38:        currentPlayer = currentPlayer + 1;//Still safe to increment
        -:   39:    }
        -:   40:    else{
        2:   41:        currentPlayer = 0;//Max player has been reached, loop back around to player 1
        -:   42:    }
        -:   43:
        5:   44:    assert(whoseTurn(&G) == currentPlayer);
        5:   45:    printf("Whose turn is now player %d\n", whoseTurn(&G));
        -:   46:
        5:   47:    assert(G.numActions == numActions);
        5:   48:    assert(G.numBuys == numBuys);
        -:   49:
        5:   50:    printf("Player %d actual action = %d buy = %d, expected action = %d expected buy = %d\n",
        -:   51:            currentPlayer, G.numActions, G.numBuys, numActions, numBuys);
        -:   52:
        5:   53:    assert(G.handCount[currentPlayer] == newHandCount);
        5:   54:    printf("Player %d actual handcount = %d, expected = %d\n", currentPlayer, G.handCount[currentPlayer], newHandCount);
        -:   55:  }
        1:   56:  printf("All tests passed!\n\n");
        -:   57:
        1:   58:  return 0;
        -:   59:}
