        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        1:    8:int main(){
        -:    9:
        -:   10:  int i;
        -:   11:
        1:   12:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   13:	       remodel, smithy, village, baron, great_hall};
        -:   14:
        -:   15:  int currentPlayer;
        -:   16:
        -:   17:  struct gameState G;
        -:   18:
        1:   19:  initializeGame(2, k, 1, &G);//Initialize game with 2 players
        -:   20:
        1:   21:  printf("TESTING whoseTurn(): 2 Players\n");
       13:   22:  for (i = 0; i < 12; i++){
       12:   23:    currentPlayer = whoseTurn(&G);
       12:   24:    printf("Whose turn is now player %d\n", G.whoseTurn);
        -:   25:
       12:   26:    if (currentPlayer < (G.numPlayers - 1)){
        6:   27:      currentPlayer = currentPlayer + 1;//Still safe to increment
        -:   28:    }
        -:   29:    else{
        6:   30:      currentPlayer = 0;//Max player has been reached, loop back around to player 1
        -:   31:    }
        -:   32:
       12:   33:    endTurn(&G);
       12:   34:    assert(G.whoseTurn == currentPlayer);
        -:   35:  }
        -:   36:
        1:   37:  printf("All tests passed!\n\n");
        -:   38:
        -:   39:
        1:   40:  initializeGame(3, k, 1, &G);//Initialize game with 3 players
        -:   41:
        1:   42:  printf("TESTING whoseTurn(): 3 Players\n");
       13:   43:  for (i = 0; i < 12; i++){
       12:   44:    currentPlayer = whoseTurn(&G);
       12:   45:    printf("Whose turn is now player %d\n", G.whoseTurn);
        -:   46:
       12:   47:    if (currentPlayer < (G.numPlayers - 1)){
        8:   48:      currentPlayer = currentPlayer + 1;//Still safe to increment
        -:   49:    }
        -:   50:    else{
        4:   51:      currentPlayer = 0;//Max player has been reached, loop back around to player 1
        -:   52:    }
        -:   53:
       12:   54:    endTurn(&G);
       12:   55:    assert(G.whoseTurn == currentPlayer);
        -:   56:  }
        1:   57:  printf("All tests passed!\n\n");
        -:   58:
        -:   59:
        1:   60:  initializeGame(4, k, 1, &G);//Initialize game with 4 players
        -:   61:
        1:   62:  printf("TESTING whoseTurn(): 4 Players\n");
       13:   63:  for (i = 0; i < 12; i++){
       12:   64:    currentPlayer = whoseTurn(&G);
       12:   65:    printf("Whose turn is now player %d\n", G.whoseTurn);
        -:   66:
       12:   67:    if (currentPlayer < (G.numPlayers - 1)){
        9:   68:      currentPlayer = currentPlayer + 1;//Still safe to increment
        -:   69:    }
        -:   70:    else{
        3:   71:      currentPlayer = 0;//Max player has been reached, loop back around to player 1
        -:   72:    }
        -:   73:
       12:   74:    endTurn(&G);
       12:   75:    assert(G.whoseTurn == currentPlayer);
        -:   76:  }
        1:   77:  printf("All tests passed!\n");
        -:   78:
        1:   79:  return 0;
        -:   80:}
