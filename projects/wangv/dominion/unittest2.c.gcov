        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        1:    8:int main(){
        -:    9:
        -:   10:  int actual;
        -:   11:  int expected;
        -:   12:
        1:   13:  printf("TESTING getCost():\n");
        -:   14:
        -:   15:  //Test Duchy
        1:   16:  expected = 5;  //cost of Duchy
        1:   17:  actual = (getCost(duchy));
        -:   18:
        1:   19:  printf("Actual cost = %d, expected = %d\n", actual, expected);
        1:   20:  assert(expected == actual);
        -:   21:
        -:   22:  //Test Province
        1:   23:  expected = 8;
        1:   24:  actual = (getCost(province));
        -:   25:
        1:   26:  printf("Actual cost = %d, expected = %d\n", actual, expected);
        1:   27:  assert(expected == actual);
        -:   28:
        -:   29:  //Test Copper
        1:   30:  expected = 0;
        1:   31:  actual = (getCost(copper));
        -:   32:
        1:   33:  printf("Actual cost = %d, expected = %d\n", actual, expected);
        1:   34:  assert(expected == actual);
        -:   35:
        -:   36:  //Test Gold
        1:   37:  expected = 6;
        1:   38:  actual = (getCost(gold));
        -:   39:
        1:   40:  printf("Actual cost = %d, expected = %d\n", actual, expected);
        1:   41:  assert(expected == actual);
        -:   42:
        -:   43:  //Test feast
        1:   44:  expected = 4;
        1:   45:  actual = (getCost(feast));
        -:   46:
        1:   47:  printf("Actual cost = %d, expected = %d\n", actual, expected);
        1:   48:  assert(expected == actual);
        -:   49:
        -:   50:  //Test Smithy
        1:   51:  expected = 4;
        1:   52:  actual = (getCost(smithy));
        -:   53:
        1:   54:  printf("Actual cost = %d, expected = %d\n", actual, expected);
        1:   55:  assert(expected == actual);
        -:   56:
        -:   57:  //Village
        1:   58:  expected = 3;
        1:   59:  actual = (getCost(village));
        -:   60:
        1:   61:  printf("Actual cost = %d, expected = %d\n", actual, expected);
        1:   62:  assert(expected == actual);
        -:   63:
        -:   64:  //Test Ambassador
        1:   65:  expected = 3;
        1:   66:  actual = (getCost(ambassador));
        -:   67:
        1:   68:  printf("Actual cost = %d, expected = %d\n", actual, expected);
        1:   69:  assert(expected == actual);
        -:   70:
        -:   71:  //Test Outpost
        1:   72:  expected = 5;
        1:   73:  actual = (getCost(outpost));
        -:   74:
        1:   75:  printf("Actual cost = %d, expected = %d\n", actual, expected);
        1:   76:  assert(expected == actual);
        -:   77:
        -:   78:  //Test Treasure Map
        1:   79:  expected = 4;
        1:   80:  actual = (getCost(treasure_map));
        -:   81:
        1:   82:  printf("Actual cost = %d, expected = %d\n", actual, expected);
        1:   83:  assert(expected == actual);
        -:   84:
        -:   85:
        1:   86:  printf("All tests passed!\n");
        -:   87:
        1:   88:  return 0;
        -:   89:}
