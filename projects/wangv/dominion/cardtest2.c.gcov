        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        6:    8:int assertFunc(int actual, int expected)
        -:    9:{
        6:   10:  if (actual == expected){
        -:   11:    //printf("Assert confirmed.\n");
        6:   12:    return 0;
        -:   13:  }
        -:   14:  else {
    #####:   15:    printf("Error! Assert failed!\n");
    #####:   16:    return -1;
        -:   17:  }
        -:   18:
        -:   19:}
        -:   20:
        2:   21:int main(){
        -:   22:
        -:   23:  int i;
        -:   24:
        2:   25:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   26:	       remodel, smithy, village, baron, great_hall};
        -:   27:
        -:   28:  int currentPlayer;
        -:   29:  int expHandCount;
        -:   30:
        -:   31:  struct gameState G;
        -:   32:
        2:   33:  initializeGame(2, k, 1, &G);//Initialize game with 2 players
        -:   34:
        2:   35:  printf("TESTING Card Smithy:\n");
        -:   36:
        2:   37:  currentPlayer = whoseTurn(&G);
        -:   38:
        2:   39:  expHandCount = 5;
        -:   40:
        2:   41:  assertFunc(G.handCount[currentPlayer], expHandCount);
        2:   42:  printf("Actual handcount = %d, expected = %d\n", G.handCount[currentPlayer], expHandCount);
        -:   43:
        2:   44:  cardEffectSmithy(currentPlayer, &G, 0);
        2:   45:  printf("Playing Smithy...\n");
        -:   46:
        2:   47:  expHandCount = 7;
        -:   48:
        2:   49:  assertFunc(G.handCount[currentPlayer], expHandCount);
        2:   50:  printf("Actual handcount = %d, expected = %d\n", G.handCount[currentPlayer], expHandCount);
        -:   51:
        2:   52:  if (assertFunc(G.handCount[currentPlayer], expHandCount) == 0){
        2:   53:    printf("All tests passed!\n");
        -:   54:  }
        -:   55:
        -:   56:
        2:   57:  return 0;
        -:   58:}
        -:   59:
